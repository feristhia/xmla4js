#summary This page explains how to get started using xmla4js
#labels Phase-Deploy

= Introduction =

Xmla.js is simply a javascript library. All it takes to start using it, is to create a web page, and use a <script> tag to include the Xmla.js library. 

However, because Xmla.js uses HTTP requests to post SOAP requests (and receive SOAP responses) to a XML/A webservice, it is bound to the <a href="http://en.wikipedia.org/wiki/Same_origin_policy">same origin policy</a>. This means you can't use Xmla.js to do cross-domain requests.

Effectively this means that webpages that want to use Xmla.js must reside on the same web server as where the XML/A webservice lives, or access the remote XML/A server through a proxy.

Currently, this page provides tips to start using Xmla4js with the Open Source <a href="http://sourceforge.net/projects/pentaho/files/Business%20Intelligence%20Server/">Pentaho BI Server</a>. For other XML/A providers, the steps to get started with xmla4js are almost certainly similar, although details such as specific paths and urls are likely to differ. You are encouraged to contribute feedback and information on how to set up Xmla4js on other XML/A servers.

= Details =

== Setting up Xmla4js as a separate webapp next to the Pentaho BI server ==
The steps described on this page assume you have downloaded and unpacked the Pentaho BI server on your local system. The remainder of this page will assume that the Pentaho BI Server is started and has a default configuration. You can check this by navigating to http://localhost:8080/ with your webbrowser. This should redirect you to http://localhost:8080/pentaho, and show you the welcome page with a login button.

First, you need to open a shell and change the current working directory to the tomcat/webapps directory located in the home directory of the Pentaho BI server. Suppose you unpacked the compressed archive of the Pentaho BI server to /opt/pentaho, then you should cd to /opt/pentaho/biserver-ce/tomcat/webapps.

=== With the .zip archive ===
One way of getting xmla4js is by downloading the xmla4js.zip archive from the downloads page. For your convenience the address to the download page is included below: 

http://code.google.com/p/xmla4js/downloads/detail?name=xmla4js.zip

After downloading, unzip the archive, and copy the xmla4js directory (and its contents) to the webapps directory.

=== With subversion checkout ===
Another way of getting xmla4js is by doing a subversion checkout in the webapps directory. The command line to checkout the project can be found here:

    http://code.google.com/p/xmla4js/source/checkout

For your convenience, the command-line is included here too:

    svn checkout http://xmla4js.googlecode.com/svn/trunk/ xmla4js-read-only

This will create a xmla4js-read-only directory in tomcat's webapps directory.

== Setting Xmla4js in Apache http server to connect to a remote XML/A server ==

It's possible to use Xmla4js to access remote XML/A servers. In this case, Xmla4js will be server from a regular HTTP server like Apache, but send SOAP requests to an externam XML/A server. 

In order to make this kind of setup work, the regular HTTP server (the one where Xmla4js is deployed) has to act as a proxy for the remote XML/A server. That's because the XMLHttpRequest object used by Xmla4js is restricted from doing cross-domain requests. This is not a property of Xmla4js but a general security measure (see also http://developer.yahoo.com/javascript/howto-proxy.html).

Here's a sample configuration file for Apache:
{{{
#
# make D:\Projects\xmla4js accessible from the webhost as http://webhost/xmla4js
#
Alias /xmla4js     "D:\Projects\xmla4js"

#
# cofigure access to the resources in the xmla4js installation directory
#
<Directory "D:\Projects\xmla4js">
  Options All
  AllowOverride All
  Order allow,deny
  Allow from all
</Directory>

ProxyRequests Off

#
# set up access to the Palo XML/A server
#
<Location /palo>
  ProxyPass http://localhost:4242/xmla/
  ProxyPassReverse http://localhost:4242/xmla/
  SetEnv proxy-chain-auth
</Location>

#
# set up access to the Pentaho XML/A server
#
<Proxy /pentaho>
  Order deny,allow
  Allow from all
  ProxyPass http://localhost:8080/pentaho
  ProxyPassReverse http://localhost:8080/pentaho
  SetEnv proxy-chain-auth
</Proxy>
}}}
When using this type of setup for pentaho, there is one more additional step to take. As per the XML/A spec, an initial request to discover XML/A datasources may return a URL which should be used for subsequent and more specific XML/A requests. In the case of Pentaho, the XML/A datasource is configured in biserver-ce/pentaho-solutions/system/olap/datasources.xml.

This is what datasources.xml typically looks like:
{{{
<?xml version="1.0" encoding="UTF-8"?>
<DataSources>
  <DataSource>
    <DataSourceName>Provider=Mondrian;DataSource=Pentaho</DataSourceName>
    <DataSourceDescription>Pentaho BI Platform Datasources</DataSourceDescription>
    <URL>http://localhost:8080/pentaho/Xmla?userid=joe&amp;password=password</URL>
    <DataSourceInfo>Provider=mondrian</DataSourceInfo>
    <ProviderName>PentahoXMLA</ProviderName>
    <ProviderType>MDP</ProviderType>
    <AuthenticationMode>Unauthenticated</AuthenticationMode>
    <Catalogs>
      <Catalog name="SteelWheels">
        <DataSourceInfo>Provider=mondrian;DataSource=SampleData</DataSourceInfo>
        <Definition>solution:steel-wheels/analysis/steelwheels.mondrian.xml</Definition>
      </Catalog>
      <Catalog name="SampleData">
        <DataSourceInfo>Provider=mondrian;DataSource=SampleData</DataSourceInfo>
        <Definition>solution:steel-wheels/analysis/SampleData.mondrian.xml</Definition>
      </Catalog>
    </Catalogs>
  </DataSource>
</DataSources>
}}}

As you can see, the `<URL>` element points to the wrong location. This can be easily fixed simply by removeing the text between the `<URL>` tags, effectively replacing:
{{{
    <URL>http://localhost:8080/pentaho/Xmla?userid=joe&amp;password=password</URL>
}}}
with
{{{
    <URL></URL>
}}}

== Next steps ==

After placing xmla4js on your system,you should be able to navigate your browser to the local Xmla4js homepage. If you set Xmla4js up inside your pentaho BI server according to the instructions above, you should be able to find it here:

    http://localhost:8080/xmla4js-read-only/index.html (if you used a subversion checkout)
    http://localhost:8080/xmla4js/index.html (if you downloaded the zip and unpacked to xmla4js)

If you set up Xmla4js inside your regular HTTP server via a proxy, you should be able to find it here:

    http://localhost/xmla4js-read-only/index.html (if you used a subversion checkout)
    http://localhost/xmla4js/index.html (if you downloaded the zip and unpacked to xmla4js)


From there, you can follow the links to the API documentation and various sample pages.